# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloConvolutionOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloConvolutionOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloConvolutionOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloConvolutionOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloConvolutionOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloConvolutionOptions
    def WindowStrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def WindowStridesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def WindowStridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def WindowStridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloConvolutionOptions
    def Padding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def PaddingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def PaddingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def PaddingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloConvolutionOptions
    def LhsDilation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def LhsDilationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def LhsDilationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def LhsDilationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StablehloConvolutionOptions
    def RhsDilation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def RhsDilationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def RhsDilationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def RhsDilationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StablehloConvolutionOptions
    def WindowReversal(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # StablehloConvolutionOptions
    def WindowReversalAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # StablehloConvolutionOptions
    def WindowReversalLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def WindowReversalIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # StablehloConvolutionOptions
    def InputBatchDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def InputFeatureDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def InputSpatialDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def InputSpatialDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def InputSpatialDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def InputSpatialDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # StablehloConvolutionOptions
    def KernelInputFeatureDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def KernelOutputFeatureDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def KernelSpatialDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def KernelSpatialDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def KernelSpatialDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def KernelSpatialDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # StablehloConvolutionOptions
    def OutputBatchDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def OutputFeatureDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def OutputSpatialDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloConvolutionOptions
    def OutputSpatialDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloConvolutionOptions
    def OutputSpatialDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def OutputSpatialDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        return o == 0

    # StablehloConvolutionOptions
    def FeatureGroupCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def BatchGroupCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloConvolutionOptions
    def PrecisionConfig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StablehloConvolutionOptions
    def PrecisionConfigAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StablehloConvolutionOptions
    def PrecisionConfigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloConvolutionOptions
    def PrecisionConfigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

def StablehloConvolutionOptionsStart(builder):
    builder.StartObject(17)

def Start(builder):
    StablehloConvolutionOptionsStart(builder)

def StablehloConvolutionOptionsAddWindowStrides(builder, windowStrides):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(windowStrides), 0)

def AddWindowStrides(builder, windowStrides):
    StablehloConvolutionOptionsAddWindowStrides(builder, windowStrides)

def StablehloConvolutionOptionsStartWindowStridesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartWindowStridesVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartWindowStridesVector(builder, numElems)

def StablehloConvolutionOptionsAddPadding(builder, padding):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(padding), 0)

def AddPadding(builder, padding):
    StablehloConvolutionOptionsAddPadding(builder, padding)

def StablehloConvolutionOptionsStartPaddingVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartPaddingVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartPaddingVector(builder, numElems)

def StablehloConvolutionOptionsAddLhsDilation(builder, lhsDilation):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lhsDilation), 0)

def AddLhsDilation(builder, lhsDilation):
    StablehloConvolutionOptionsAddLhsDilation(builder, lhsDilation)

def StablehloConvolutionOptionsStartLhsDilationVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartLhsDilationVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartLhsDilationVector(builder, numElems)

def StablehloConvolutionOptionsAddRhsDilation(builder, rhsDilation):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rhsDilation), 0)

def AddRhsDilation(builder, rhsDilation):
    StablehloConvolutionOptionsAddRhsDilation(builder, rhsDilation)

def StablehloConvolutionOptionsStartRhsDilationVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRhsDilationVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartRhsDilationVector(builder, numElems)

def StablehloConvolutionOptionsAddWindowReversal(builder, windowReversal):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(windowReversal), 0)

def AddWindowReversal(builder, windowReversal):
    StablehloConvolutionOptionsAddWindowReversal(builder, windowReversal)

def StablehloConvolutionOptionsStartWindowReversalVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartWindowReversalVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartWindowReversalVector(builder, numElems)

def StablehloConvolutionOptionsAddInputBatchDimension(builder, inputBatchDimension):
    builder.PrependInt64Slot(5, inputBatchDimension, 0)

def AddInputBatchDimension(builder, inputBatchDimension):
    StablehloConvolutionOptionsAddInputBatchDimension(builder, inputBatchDimension)

def StablehloConvolutionOptionsAddInputFeatureDimension(builder, inputFeatureDimension):
    builder.PrependInt64Slot(6, inputFeatureDimension, 0)

def AddInputFeatureDimension(builder, inputFeatureDimension):
    StablehloConvolutionOptionsAddInputFeatureDimension(builder, inputFeatureDimension)

def StablehloConvolutionOptionsAddInputSpatialDimensions(builder, inputSpatialDimensions):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(inputSpatialDimensions), 0)

def AddInputSpatialDimensions(builder, inputSpatialDimensions):
    StablehloConvolutionOptionsAddInputSpatialDimensions(builder, inputSpatialDimensions)

def StablehloConvolutionOptionsStartInputSpatialDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartInputSpatialDimensionsVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartInputSpatialDimensionsVector(builder, numElems)

def StablehloConvolutionOptionsAddKernelInputFeatureDimension(builder, kernelInputFeatureDimension):
    builder.PrependInt64Slot(8, kernelInputFeatureDimension, 0)

def AddKernelInputFeatureDimension(builder, kernelInputFeatureDimension):
    StablehloConvolutionOptionsAddKernelInputFeatureDimension(builder, kernelInputFeatureDimension)

def StablehloConvolutionOptionsAddKernelOutputFeatureDimension(builder, kernelOutputFeatureDimension):
    builder.PrependInt64Slot(9, kernelOutputFeatureDimension, 0)

def AddKernelOutputFeatureDimension(builder, kernelOutputFeatureDimension):
    StablehloConvolutionOptionsAddKernelOutputFeatureDimension(builder, kernelOutputFeatureDimension)

def StablehloConvolutionOptionsAddKernelSpatialDimensions(builder, kernelSpatialDimensions):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(kernelSpatialDimensions), 0)

def AddKernelSpatialDimensions(builder, kernelSpatialDimensions):
    StablehloConvolutionOptionsAddKernelSpatialDimensions(builder, kernelSpatialDimensions)

def StablehloConvolutionOptionsStartKernelSpatialDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartKernelSpatialDimensionsVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartKernelSpatialDimensionsVector(builder, numElems)

def StablehloConvolutionOptionsAddOutputBatchDimension(builder, outputBatchDimension):
    builder.PrependInt64Slot(11, outputBatchDimension, 0)

def AddOutputBatchDimension(builder, outputBatchDimension):
    StablehloConvolutionOptionsAddOutputBatchDimension(builder, outputBatchDimension)

def StablehloConvolutionOptionsAddOutputFeatureDimension(builder, outputFeatureDimension):
    builder.PrependInt64Slot(12, outputFeatureDimension, 0)

def AddOutputFeatureDimension(builder, outputFeatureDimension):
    StablehloConvolutionOptionsAddOutputFeatureDimension(builder, outputFeatureDimension)

def StablehloConvolutionOptionsAddOutputSpatialDimensions(builder, outputSpatialDimensions):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(outputSpatialDimensions), 0)

def AddOutputSpatialDimensions(builder, outputSpatialDimensions):
    StablehloConvolutionOptionsAddOutputSpatialDimensions(builder, outputSpatialDimensions)

def StablehloConvolutionOptionsStartOutputSpatialDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartOutputSpatialDimensionsVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartOutputSpatialDimensionsVector(builder, numElems)

def StablehloConvolutionOptionsAddFeatureGroupCount(builder, featureGroupCount):
    builder.PrependInt64Slot(14, featureGroupCount, 0)

def AddFeatureGroupCount(builder, featureGroupCount):
    StablehloConvolutionOptionsAddFeatureGroupCount(builder, featureGroupCount)

def StablehloConvolutionOptionsAddBatchGroupCount(builder, batchGroupCount):
    builder.PrependInt64Slot(15, batchGroupCount, 0)

def AddBatchGroupCount(builder, batchGroupCount):
    StablehloConvolutionOptionsAddBatchGroupCount(builder, batchGroupCount)

def StablehloConvolutionOptionsAddPrecisionConfig(builder, precisionConfig):
    builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(precisionConfig), 0)

def AddPrecisionConfig(builder, precisionConfig):
    StablehloConvolutionOptionsAddPrecisionConfig(builder, precisionConfig)

def StablehloConvolutionOptionsStartPrecisionConfigVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPrecisionConfigVector(builder, numElems: int) -> int:
    return StablehloConvolutionOptionsStartPrecisionConfigVector(builder, numElems)

def StablehloConvolutionOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloConvolutionOptionsEnd(builder)

try:
    from typing import List
except:
    pass

class StablehloConvolutionOptionsT(object):

    # StablehloConvolutionOptionsT
    def __init__(self):
        self.windowStrides = None  # type: List[int]
        self.padding = None  # type: List[int]
        self.lhsDilation = None  # type: List[int]
        self.rhsDilation = None  # type: List[int]
        self.windowReversal = None  # type: List[bool]
        self.inputBatchDimension = 0  # type: int
        self.inputFeatureDimension = 0  # type: int
        self.inputSpatialDimensions = None  # type: List[int]
        self.kernelInputFeatureDimension = 0  # type: int
        self.kernelOutputFeatureDimension = 0  # type: int
        self.kernelSpatialDimensions = None  # type: List[int]
        self.outputBatchDimension = 0  # type: int
        self.outputFeatureDimension = 0  # type: int
        self.outputSpatialDimensions = None  # type: List[int]
        self.featureGroupCount = 0  # type: int
        self.batchGroupCount = 0  # type: int
        self.precisionConfig = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloConvolutionOptions = StablehloConvolutionOptions()
        stablehloConvolutionOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloConvolutionOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloConvolutionOptions):
        x = StablehloConvolutionOptionsT()
        x._UnPack(stablehloConvolutionOptions)
        return x

    # StablehloConvolutionOptionsT
    def _UnPack(self, stablehloConvolutionOptions):
        if stablehloConvolutionOptions is None:
            return
        if not stablehloConvolutionOptions.WindowStridesIsNone():
            if np is None:
                self.windowStrides = []
                for i in range(stablehloConvolutionOptions.WindowStridesLength()):
                    self.windowStrides.append(stablehloConvolutionOptions.WindowStrides(i))
            else:
                self.windowStrides = stablehloConvolutionOptions.WindowStridesAsNumpy()
        if not stablehloConvolutionOptions.PaddingIsNone():
            if np is None:
                self.padding = []
                for i in range(stablehloConvolutionOptions.PaddingLength()):
                    self.padding.append(stablehloConvolutionOptions.Padding(i))
            else:
                self.padding = stablehloConvolutionOptions.PaddingAsNumpy()
        if not stablehloConvolutionOptions.LhsDilationIsNone():
            if np is None:
                self.lhsDilation = []
                for i in range(stablehloConvolutionOptions.LhsDilationLength()):
                    self.lhsDilation.append(stablehloConvolutionOptions.LhsDilation(i))
            else:
                self.lhsDilation = stablehloConvolutionOptions.LhsDilationAsNumpy()
        if not stablehloConvolutionOptions.RhsDilationIsNone():
            if np is None:
                self.rhsDilation = []
                for i in range(stablehloConvolutionOptions.RhsDilationLength()):
                    self.rhsDilation.append(stablehloConvolutionOptions.RhsDilation(i))
            else:
                self.rhsDilation = stablehloConvolutionOptions.RhsDilationAsNumpy()
        if not stablehloConvolutionOptions.WindowReversalIsNone():
            if np is None:
                self.windowReversal = []
                for i in range(stablehloConvolutionOptions.WindowReversalLength()):
                    self.windowReversal.append(stablehloConvolutionOptions.WindowReversal(i))
            else:
                self.windowReversal = stablehloConvolutionOptions.WindowReversalAsNumpy()
        self.inputBatchDimension = stablehloConvolutionOptions.InputBatchDimension()
        self.inputFeatureDimension = stablehloConvolutionOptions.InputFeatureDimension()
        if not stablehloConvolutionOptions.InputSpatialDimensionsIsNone():
            if np is None:
                self.inputSpatialDimensions = []
                for i in range(stablehloConvolutionOptions.InputSpatialDimensionsLength()):
                    self.inputSpatialDimensions.append(stablehloConvolutionOptions.InputSpatialDimensions(i))
            else:
                self.inputSpatialDimensions = stablehloConvolutionOptions.InputSpatialDimensionsAsNumpy()
        self.kernelInputFeatureDimension = stablehloConvolutionOptions.KernelInputFeatureDimension()
        self.kernelOutputFeatureDimension = stablehloConvolutionOptions.KernelOutputFeatureDimension()
        if not stablehloConvolutionOptions.KernelSpatialDimensionsIsNone():
            if np is None:
                self.kernelSpatialDimensions = []
                for i in range(stablehloConvolutionOptions.KernelSpatialDimensionsLength()):
                    self.kernelSpatialDimensions.append(stablehloConvolutionOptions.KernelSpatialDimensions(i))
            else:
                self.kernelSpatialDimensions = stablehloConvolutionOptions.KernelSpatialDimensionsAsNumpy()
        self.outputBatchDimension = stablehloConvolutionOptions.OutputBatchDimension()
        self.outputFeatureDimension = stablehloConvolutionOptions.OutputFeatureDimension()
        if not stablehloConvolutionOptions.OutputSpatialDimensionsIsNone():
            if np is None:
                self.outputSpatialDimensions = []
                for i in range(stablehloConvolutionOptions.OutputSpatialDimensionsLength()):
                    self.outputSpatialDimensions.append(stablehloConvolutionOptions.OutputSpatialDimensions(i))
            else:
                self.outputSpatialDimensions = stablehloConvolutionOptions.OutputSpatialDimensionsAsNumpy()
        self.featureGroupCount = stablehloConvolutionOptions.FeatureGroupCount()
        self.batchGroupCount = stablehloConvolutionOptions.BatchGroupCount()
        if not stablehloConvolutionOptions.PrecisionConfigIsNone():
            if np is None:
                self.precisionConfig = []
                for i in range(stablehloConvolutionOptions.PrecisionConfigLength()):
                    self.precisionConfig.append(stablehloConvolutionOptions.PrecisionConfig(i))
            else:
                self.precisionConfig = stablehloConvolutionOptions.PrecisionConfigAsNumpy()

    # StablehloConvolutionOptionsT
    def Pack(self, builder):
        if self.windowStrides is not None:
            if np is not None and type(self.windowStrides) is np.ndarray:
                windowStrides = builder.CreateNumpyVector(self.windowStrides)
            else:
                StablehloConvolutionOptionsStartWindowStridesVector(builder, len(self.windowStrides))
                for i in reversed(range(len(self.windowStrides))):
                    builder.PrependInt64(self.windowStrides[i])
                windowStrides = builder.EndVector()
        if self.padding is not None:
            if np is not None and type(self.padding) is np.ndarray:
                padding = builder.CreateNumpyVector(self.padding)
            else:
                StablehloConvolutionOptionsStartPaddingVector(builder, len(self.padding))
                for i in reversed(range(len(self.padding))):
                    builder.PrependInt64(self.padding[i])
                padding = builder.EndVector()
        if self.lhsDilation is not None:
            if np is not None and type(self.lhsDilation) is np.ndarray:
                lhsDilation = builder.CreateNumpyVector(self.lhsDilation)
            else:
                StablehloConvolutionOptionsStartLhsDilationVector(builder, len(self.lhsDilation))
                for i in reversed(range(len(self.lhsDilation))):
                    builder.PrependInt64(self.lhsDilation[i])
                lhsDilation = builder.EndVector()
        if self.rhsDilation is not None:
            if np is not None and type(self.rhsDilation) is np.ndarray:
                rhsDilation = builder.CreateNumpyVector(self.rhsDilation)
            else:
                StablehloConvolutionOptionsStartRhsDilationVector(builder, len(self.rhsDilation))
                for i in reversed(range(len(self.rhsDilation))):
                    builder.PrependInt64(self.rhsDilation[i])
                rhsDilation = builder.EndVector()
        if self.windowReversal is not None:
            if np is not None and type(self.windowReversal) is np.ndarray:
                windowReversal = builder.CreateNumpyVector(self.windowReversal)
            else:
                StablehloConvolutionOptionsStartWindowReversalVector(builder, len(self.windowReversal))
                for i in reversed(range(len(self.windowReversal))):
                    builder.PrependBool(self.windowReversal[i])
                windowReversal = builder.EndVector()
        if self.inputSpatialDimensions is not None:
            if np is not None and type(self.inputSpatialDimensions) is np.ndarray:
                inputSpatialDimensions = builder.CreateNumpyVector(self.inputSpatialDimensions)
            else:
                StablehloConvolutionOptionsStartInputSpatialDimensionsVector(builder, len(self.inputSpatialDimensions))
                for i in reversed(range(len(self.inputSpatialDimensions))):
                    builder.PrependInt64(self.inputSpatialDimensions[i])
                inputSpatialDimensions = builder.EndVector()
        if self.kernelSpatialDimensions is not None:
            if np is not None and type(self.kernelSpatialDimensions) is np.ndarray:
                kernelSpatialDimensions = builder.CreateNumpyVector(self.kernelSpatialDimensions)
            else:
                StablehloConvolutionOptionsStartKernelSpatialDimensionsVector(builder, len(self.kernelSpatialDimensions))
                for i in reversed(range(len(self.kernelSpatialDimensions))):
                    builder.PrependInt64(self.kernelSpatialDimensions[i])
                kernelSpatialDimensions = builder.EndVector()
        if self.outputSpatialDimensions is not None:
            if np is not None and type(self.outputSpatialDimensions) is np.ndarray:
                outputSpatialDimensions = builder.CreateNumpyVector(self.outputSpatialDimensions)
            else:
                StablehloConvolutionOptionsStartOutputSpatialDimensionsVector(builder, len(self.outputSpatialDimensions))
                for i in reversed(range(len(self.outputSpatialDimensions))):
                    builder.PrependInt64(self.outputSpatialDimensions[i])
                outputSpatialDimensions = builder.EndVector()
        if self.precisionConfig is not None:
            if np is not None and type(self.precisionConfig) is np.ndarray:
                precisionConfig = builder.CreateNumpyVector(self.precisionConfig)
            else:
                StablehloConvolutionOptionsStartPrecisionConfigVector(builder, len(self.precisionConfig))
                for i in reversed(range(len(self.precisionConfig))):
                    builder.PrependUint32(self.precisionConfig[i])
                precisionConfig = builder.EndVector()
        StablehloConvolutionOptionsStart(builder)
        if self.windowStrides is not None:
            StablehloConvolutionOptionsAddWindowStrides(builder, windowStrides)
        if self.padding is not None:
            StablehloConvolutionOptionsAddPadding(builder, padding)
        if self.lhsDilation is not None:
            StablehloConvolutionOptionsAddLhsDilation(builder, lhsDilation)
        if self.rhsDilation is not None:
            StablehloConvolutionOptionsAddRhsDilation(builder, rhsDilation)
        if self.windowReversal is not None:
            StablehloConvolutionOptionsAddWindowReversal(builder, windowReversal)
        StablehloConvolutionOptionsAddInputBatchDimension(builder, self.inputBatchDimension)
        StablehloConvolutionOptionsAddInputFeatureDimension(builder, self.inputFeatureDimension)
        if self.inputSpatialDimensions is not None:
            StablehloConvolutionOptionsAddInputSpatialDimensions(builder, inputSpatialDimensions)
        StablehloConvolutionOptionsAddKernelInputFeatureDimension(builder, self.kernelInputFeatureDimension)
        StablehloConvolutionOptionsAddKernelOutputFeatureDimension(builder, self.kernelOutputFeatureDimension)
        if self.kernelSpatialDimensions is not None:
            StablehloConvolutionOptionsAddKernelSpatialDimensions(builder, kernelSpatialDimensions)
        StablehloConvolutionOptionsAddOutputBatchDimension(builder, self.outputBatchDimension)
        StablehloConvolutionOptionsAddOutputFeatureDimension(builder, self.outputFeatureDimension)
        if self.outputSpatialDimensions is not None:
            StablehloConvolutionOptionsAddOutputSpatialDimensions(builder, outputSpatialDimensions)
        StablehloConvolutionOptionsAddFeatureGroupCount(builder, self.featureGroupCount)
        StablehloConvolutionOptionsAddBatchGroupCount(builder, self.batchGroupCount)
        if self.precisionConfig is not None:
            StablehloConvolutionOptionsAddPrecisionConfig(builder, precisionConfig)
        stablehloConvolutionOptions = StablehloConvolutionOptionsEnd(builder)
        return stablehloConvolutionOptions
