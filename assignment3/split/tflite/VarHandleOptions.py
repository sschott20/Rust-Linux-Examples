# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VarHandleOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VarHandleOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVarHandleOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def VarHandleOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # VarHandleOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VarHandleOptions
    def Container(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # VarHandleOptions
    def SharedName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def VarHandleOptionsStart(builder):
    builder.StartObject(2)

def Start(builder):
    VarHandleOptionsStart(builder)

def VarHandleOptionsAddContainer(builder, container):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(container), 0)

def AddContainer(builder, container):
    VarHandleOptionsAddContainer(builder, container)

def VarHandleOptionsAddSharedName(builder, sharedName):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(sharedName), 0)

def AddSharedName(builder, sharedName):
    VarHandleOptionsAddSharedName(builder, sharedName)

def VarHandleOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return VarHandleOptionsEnd(builder)


class VarHandleOptionsT(object):

    # VarHandleOptionsT
    def __init__(self):
        self.container = None  # type: str
        self.sharedName = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        varHandleOptions = VarHandleOptions()
        varHandleOptions.Init(buf, pos)
        return cls.InitFromObj(varHandleOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, varHandleOptions):
        x = VarHandleOptionsT()
        x._UnPack(varHandleOptions)
        return x

    # VarHandleOptionsT
    def _UnPack(self, varHandleOptions):
        if varHandleOptions is None:
            return
        self.container = varHandleOptions.Container()
        self.sharedName = varHandleOptions.SharedName()

    # VarHandleOptionsT
    def Pack(self, builder):
        if self.container is not None:
            container = builder.CreateString(self.container)
        if self.sharedName is not None:
            sharedName = builder.CreateString(self.sharedName)
        VarHandleOptionsStart(builder)
        if self.container is not None:
            VarHandleOptionsAddContainer(builder, container)
        if self.sharedName is not None:
            VarHandleOptionsAddSharedName(builder, sharedName)
        varHandleOptions = VarHandleOptionsEnd(builder)
        return varHandleOptions
