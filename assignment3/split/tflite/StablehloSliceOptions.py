# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloSliceOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloSliceOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloSliceOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloSliceOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloSliceOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloSliceOptions
    def StartIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloSliceOptions
    def StartIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloSliceOptions
    def StartIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloSliceOptions
    def StartIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloSliceOptions
    def LimitIndices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloSliceOptions
    def LimitIndicesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloSliceOptions
    def LimitIndicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloSliceOptions
    def LimitIndicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloSliceOptions
    def Strides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloSliceOptions
    def StridesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloSliceOptions
    def StridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloSliceOptions
    def StridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

def StablehloSliceOptionsStart(builder):
    builder.StartObject(3)

def Start(builder):
    StablehloSliceOptionsStart(builder)

def StablehloSliceOptionsAddStartIndices(builder, startIndices):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(startIndices), 0)

def AddStartIndices(builder, startIndices):
    StablehloSliceOptionsAddStartIndices(builder, startIndices)

def StablehloSliceOptionsStartStartIndicesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartStartIndicesVector(builder, numElems: int) -> int:
    return StablehloSliceOptionsStartStartIndicesVector(builder, numElems)

def StablehloSliceOptionsAddLimitIndices(builder, limitIndices):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(limitIndices), 0)

def AddLimitIndices(builder, limitIndices):
    StablehloSliceOptionsAddLimitIndices(builder, limitIndices)

def StablehloSliceOptionsStartLimitIndicesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartLimitIndicesVector(builder, numElems: int) -> int:
    return StablehloSliceOptionsStartLimitIndicesVector(builder, numElems)

def StablehloSliceOptionsAddStrides(builder, strides):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(strides), 0)

def AddStrides(builder, strides):
    StablehloSliceOptionsAddStrides(builder, strides)

def StablehloSliceOptionsStartStridesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartStridesVector(builder, numElems: int) -> int:
    return StablehloSliceOptionsStartStridesVector(builder, numElems)

def StablehloSliceOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloSliceOptionsEnd(builder)

try:
    from typing import List
except:
    pass

class StablehloSliceOptionsT(object):

    # StablehloSliceOptionsT
    def __init__(self):
        self.startIndices = None  # type: List[int]
        self.limitIndices = None  # type: List[int]
        self.strides = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloSliceOptions = StablehloSliceOptions()
        stablehloSliceOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloSliceOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloSliceOptions):
        x = StablehloSliceOptionsT()
        x._UnPack(stablehloSliceOptions)
        return x

    # StablehloSliceOptionsT
    def _UnPack(self, stablehloSliceOptions):
        if stablehloSliceOptions is None:
            return
        if not stablehloSliceOptions.StartIndicesIsNone():
            if np is None:
                self.startIndices = []
                for i in range(stablehloSliceOptions.StartIndicesLength()):
                    self.startIndices.append(stablehloSliceOptions.StartIndices(i))
            else:
                self.startIndices = stablehloSliceOptions.StartIndicesAsNumpy()
        if not stablehloSliceOptions.LimitIndicesIsNone():
            if np is None:
                self.limitIndices = []
                for i in range(stablehloSliceOptions.LimitIndicesLength()):
                    self.limitIndices.append(stablehloSliceOptions.LimitIndices(i))
            else:
                self.limitIndices = stablehloSliceOptions.LimitIndicesAsNumpy()
        if not stablehloSliceOptions.StridesIsNone():
            if np is None:
                self.strides = []
                for i in range(stablehloSliceOptions.StridesLength()):
                    self.strides.append(stablehloSliceOptions.Strides(i))
            else:
                self.strides = stablehloSliceOptions.StridesAsNumpy()

    # StablehloSliceOptionsT
    def Pack(self, builder):
        if self.startIndices is not None:
            if np is not None and type(self.startIndices) is np.ndarray:
                startIndices = builder.CreateNumpyVector(self.startIndices)
            else:
                StablehloSliceOptionsStartStartIndicesVector(builder, len(self.startIndices))
                for i in reversed(range(len(self.startIndices))):
                    builder.PrependInt64(self.startIndices[i])
                startIndices = builder.EndVector()
        if self.limitIndices is not None:
            if np is not None and type(self.limitIndices) is np.ndarray:
                limitIndices = builder.CreateNumpyVector(self.limitIndices)
            else:
                StablehloSliceOptionsStartLimitIndicesVector(builder, len(self.limitIndices))
                for i in reversed(range(len(self.limitIndices))):
                    builder.PrependInt64(self.limitIndices[i])
                limitIndices = builder.EndVector()
        if self.strides is not None:
            if np is not None and type(self.strides) is np.ndarray:
                strides = builder.CreateNumpyVector(self.strides)
            else:
                StablehloSliceOptionsStartStridesVector(builder, len(self.strides))
                for i in reversed(range(len(self.strides))):
                    builder.PrependInt64(self.strides[i])
                strides = builder.EndVector()
        StablehloSliceOptionsStart(builder)
        if self.startIndices is not None:
            StablehloSliceOptionsAddStartIndices(builder, startIndices)
        if self.limitIndices is not None:
            StablehloSliceOptionsAddLimitIndices(builder, limitIndices)
        if self.strides is not None:
            StablehloSliceOptionsAddStrides(builder, strides)
        stablehloSliceOptions = StablehloSliceOptionsEnd(builder)
        return stablehloSliceOptions
