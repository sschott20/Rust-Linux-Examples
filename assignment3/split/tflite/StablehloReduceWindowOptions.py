# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloReduceWindowOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloReduceWindowOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloReduceWindowOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloReduceWindowOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloReduceWindowOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloReduceWindowOptions
    def WindowDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceWindowOptions
    def WindowDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceWindowOptions
    def WindowDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceWindowOptions
    def WindowDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloReduceWindowOptions
    def WindowStrides(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceWindowOptions
    def WindowStridesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceWindowOptions
    def WindowStridesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceWindowOptions
    def WindowStridesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloReduceWindowOptions
    def BaseDilations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceWindowOptions
    def BaseDilationsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceWindowOptions
    def BaseDilationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceWindowOptions
    def BaseDilationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StablehloReduceWindowOptions
    def WindowDilations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceWindowOptions
    def WindowDilationsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceWindowOptions
    def WindowDilationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceWindowOptions
    def WindowDilationsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StablehloReduceWindowOptions
    def Padding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloReduceWindowOptions
    def PaddingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloReduceWindowOptions
    def PaddingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloReduceWindowOptions
    def PaddingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # StablehloReduceWindowOptions
    def BodySubgraphIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def StablehloReduceWindowOptionsStart(builder):
    builder.StartObject(6)

def Start(builder):
    StablehloReduceWindowOptionsStart(builder)

def StablehloReduceWindowOptionsAddWindowDimensions(builder, windowDimensions):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(windowDimensions), 0)

def AddWindowDimensions(builder, windowDimensions):
    StablehloReduceWindowOptionsAddWindowDimensions(builder, windowDimensions)

def StablehloReduceWindowOptionsStartWindowDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartWindowDimensionsVector(builder, numElems: int) -> int:
    return StablehloReduceWindowOptionsStartWindowDimensionsVector(builder, numElems)

def StablehloReduceWindowOptionsAddWindowStrides(builder, windowStrides):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(windowStrides), 0)

def AddWindowStrides(builder, windowStrides):
    StablehloReduceWindowOptionsAddWindowStrides(builder, windowStrides)

def StablehloReduceWindowOptionsStartWindowStridesVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartWindowStridesVector(builder, numElems: int) -> int:
    return StablehloReduceWindowOptionsStartWindowStridesVector(builder, numElems)

def StablehloReduceWindowOptionsAddBaseDilations(builder, baseDilations):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(baseDilations), 0)

def AddBaseDilations(builder, baseDilations):
    StablehloReduceWindowOptionsAddBaseDilations(builder, baseDilations)

def StablehloReduceWindowOptionsStartBaseDilationsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartBaseDilationsVector(builder, numElems: int) -> int:
    return StablehloReduceWindowOptionsStartBaseDilationsVector(builder, numElems)

def StablehloReduceWindowOptionsAddWindowDilations(builder, windowDilations):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(windowDilations), 0)

def AddWindowDilations(builder, windowDilations):
    StablehloReduceWindowOptionsAddWindowDilations(builder, windowDilations)

def StablehloReduceWindowOptionsStartWindowDilationsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartWindowDilationsVector(builder, numElems: int) -> int:
    return StablehloReduceWindowOptionsStartWindowDilationsVector(builder, numElems)

def StablehloReduceWindowOptionsAddPadding(builder, padding):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(padding), 0)

def AddPadding(builder, padding):
    StablehloReduceWindowOptionsAddPadding(builder, padding)

def StablehloReduceWindowOptionsStartPaddingVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartPaddingVector(builder, numElems: int) -> int:
    return StablehloReduceWindowOptionsStartPaddingVector(builder, numElems)

def StablehloReduceWindowOptionsAddBodySubgraphIndex(builder, bodySubgraphIndex):
    builder.PrependInt32Slot(5, bodySubgraphIndex, 0)

def AddBodySubgraphIndex(builder, bodySubgraphIndex):
    StablehloReduceWindowOptionsAddBodySubgraphIndex(builder, bodySubgraphIndex)

def StablehloReduceWindowOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloReduceWindowOptionsEnd(builder)

try:
    from typing import List
except:
    pass

class StablehloReduceWindowOptionsT(object):

    # StablehloReduceWindowOptionsT
    def __init__(self):
        self.windowDimensions = None  # type: List[int]
        self.windowStrides = None  # type: List[int]
        self.baseDilations = None  # type: List[int]
        self.windowDilations = None  # type: List[int]
        self.padding = None  # type: List[int]
        self.bodySubgraphIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloReduceWindowOptions = StablehloReduceWindowOptions()
        stablehloReduceWindowOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloReduceWindowOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloReduceWindowOptions):
        x = StablehloReduceWindowOptionsT()
        x._UnPack(stablehloReduceWindowOptions)
        return x

    # StablehloReduceWindowOptionsT
    def _UnPack(self, stablehloReduceWindowOptions):
        if stablehloReduceWindowOptions is None:
            return
        if not stablehloReduceWindowOptions.WindowDimensionsIsNone():
            if np is None:
                self.windowDimensions = []
                for i in range(stablehloReduceWindowOptions.WindowDimensionsLength()):
                    self.windowDimensions.append(stablehloReduceWindowOptions.WindowDimensions(i))
            else:
                self.windowDimensions = stablehloReduceWindowOptions.WindowDimensionsAsNumpy()
        if not stablehloReduceWindowOptions.WindowStridesIsNone():
            if np is None:
                self.windowStrides = []
                for i in range(stablehloReduceWindowOptions.WindowStridesLength()):
                    self.windowStrides.append(stablehloReduceWindowOptions.WindowStrides(i))
            else:
                self.windowStrides = stablehloReduceWindowOptions.WindowStridesAsNumpy()
        if not stablehloReduceWindowOptions.BaseDilationsIsNone():
            if np is None:
                self.baseDilations = []
                for i in range(stablehloReduceWindowOptions.BaseDilationsLength()):
                    self.baseDilations.append(stablehloReduceWindowOptions.BaseDilations(i))
            else:
                self.baseDilations = stablehloReduceWindowOptions.BaseDilationsAsNumpy()
        if not stablehloReduceWindowOptions.WindowDilationsIsNone():
            if np is None:
                self.windowDilations = []
                for i in range(stablehloReduceWindowOptions.WindowDilationsLength()):
                    self.windowDilations.append(stablehloReduceWindowOptions.WindowDilations(i))
            else:
                self.windowDilations = stablehloReduceWindowOptions.WindowDilationsAsNumpy()
        if not stablehloReduceWindowOptions.PaddingIsNone():
            if np is None:
                self.padding = []
                for i in range(stablehloReduceWindowOptions.PaddingLength()):
                    self.padding.append(stablehloReduceWindowOptions.Padding(i))
            else:
                self.padding = stablehloReduceWindowOptions.PaddingAsNumpy()
        self.bodySubgraphIndex = stablehloReduceWindowOptions.BodySubgraphIndex()

    # StablehloReduceWindowOptionsT
    def Pack(self, builder):
        if self.windowDimensions is not None:
            if np is not None and type(self.windowDimensions) is np.ndarray:
                windowDimensions = builder.CreateNumpyVector(self.windowDimensions)
            else:
                StablehloReduceWindowOptionsStartWindowDimensionsVector(builder, len(self.windowDimensions))
                for i in reversed(range(len(self.windowDimensions))):
                    builder.PrependInt64(self.windowDimensions[i])
                windowDimensions = builder.EndVector()
        if self.windowStrides is not None:
            if np is not None and type(self.windowStrides) is np.ndarray:
                windowStrides = builder.CreateNumpyVector(self.windowStrides)
            else:
                StablehloReduceWindowOptionsStartWindowStridesVector(builder, len(self.windowStrides))
                for i in reversed(range(len(self.windowStrides))):
                    builder.PrependInt64(self.windowStrides[i])
                windowStrides = builder.EndVector()
        if self.baseDilations is not None:
            if np is not None and type(self.baseDilations) is np.ndarray:
                baseDilations = builder.CreateNumpyVector(self.baseDilations)
            else:
                StablehloReduceWindowOptionsStartBaseDilationsVector(builder, len(self.baseDilations))
                for i in reversed(range(len(self.baseDilations))):
                    builder.PrependInt64(self.baseDilations[i])
                baseDilations = builder.EndVector()
        if self.windowDilations is not None:
            if np is not None and type(self.windowDilations) is np.ndarray:
                windowDilations = builder.CreateNumpyVector(self.windowDilations)
            else:
                StablehloReduceWindowOptionsStartWindowDilationsVector(builder, len(self.windowDilations))
                for i in reversed(range(len(self.windowDilations))):
                    builder.PrependInt64(self.windowDilations[i])
                windowDilations = builder.EndVector()
        if self.padding is not None:
            if np is not None and type(self.padding) is np.ndarray:
                padding = builder.CreateNumpyVector(self.padding)
            else:
                StablehloReduceWindowOptionsStartPaddingVector(builder, len(self.padding))
                for i in reversed(range(len(self.padding))):
                    builder.PrependInt64(self.padding[i])
                padding = builder.EndVector()
        StablehloReduceWindowOptionsStart(builder)
        if self.windowDimensions is not None:
            StablehloReduceWindowOptionsAddWindowDimensions(builder, windowDimensions)
        if self.windowStrides is not None:
            StablehloReduceWindowOptionsAddWindowStrides(builder, windowStrides)
        if self.baseDilations is not None:
            StablehloReduceWindowOptionsAddBaseDilations(builder, baseDilations)
        if self.windowDilations is not None:
            StablehloReduceWindowOptionsAddWindowDilations(builder, windowDilations)
        if self.padding is not None:
            StablehloReduceWindowOptionsAddPadding(builder, padding)
        StablehloReduceWindowOptionsAddBodySubgraphIndex(builder, self.bodySubgraphIndex)
        stablehloReduceWindowOptions = StablehloReduceWindowOptionsEnd(builder)
        return stablehloReduceWindowOptions
