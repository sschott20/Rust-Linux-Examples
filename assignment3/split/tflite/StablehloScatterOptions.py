# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloScatterOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloScatterOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloScatterOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloScatterOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloScatterOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloScatterOptions
    def IndicesAreSorted(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StablehloScatterOptions
    def UpdateWindowDims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloScatterOptions
    def UpdateWindowDimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloScatterOptions
    def UpdateWindowDimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloScatterOptions
    def UpdateWindowDimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloScatterOptions
    def InsertedWindowDims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloScatterOptions
    def InsertedWindowDimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloScatterOptions
    def InsertedWindowDimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloScatterOptions
    def InsertedWindowDimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StablehloScatterOptions
    def ScatterDimsToOperandDims(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloScatterOptions
    def ScatterDimsToOperandDimsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloScatterOptions
    def ScatterDimsToOperandDimsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloScatterOptions
    def ScatterDimsToOperandDimsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StablehloScatterOptions
    def IndexVectorDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # StablehloScatterOptions
    def UniqueIndices(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # StablehloScatterOptions
    def UpdateComputationSubgraphIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def StablehloScatterOptionsStart(builder):
    builder.StartObject(7)

def Start(builder):
    StablehloScatterOptionsStart(builder)

def StablehloScatterOptionsAddIndicesAreSorted(builder, indicesAreSorted):
    builder.PrependBoolSlot(0, indicesAreSorted, 0)

def AddIndicesAreSorted(builder, indicesAreSorted):
    StablehloScatterOptionsAddIndicesAreSorted(builder, indicesAreSorted)

def StablehloScatterOptionsAddUpdateWindowDims(builder, updateWindowDims):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(updateWindowDims), 0)

def AddUpdateWindowDims(builder, updateWindowDims):
    StablehloScatterOptionsAddUpdateWindowDims(builder, updateWindowDims)

def StablehloScatterOptionsStartUpdateWindowDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartUpdateWindowDimsVector(builder, numElems: int) -> int:
    return StablehloScatterOptionsStartUpdateWindowDimsVector(builder, numElems)

def StablehloScatterOptionsAddInsertedWindowDims(builder, insertedWindowDims):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(insertedWindowDims), 0)

def AddInsertedWindowDims(builder, insertedWindowDims):
    StablehloScatterOptionsAddInsertedWindowDims(builder, insertedWindowDims)

def StablehloScatterOptionsStartInsertedWindowDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartInsertedWindowDimsVector(builder, numElems: int) -> int:
    return StablehloScatterOptionsStartInsertedWindowDimsVector(builder, numElems)

def StablehloScatterOptionsAddScatterDimsToOperandDims(builder, scatterDimsToOperandDims):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scatterDimsToOperandDims), 0)

def AddScatterDimsToOperandDims(builder, scatterDimsToOperandDims):
    StablehloScatterOptionsAddScatterDimsToOperandDims(builder, scatterDimsToOperandDims)

def StablehloScatterOptionsStartScatterDimsToOperandDimsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartScatterDimsToOperandDimsVector(builder, numElems: int) -> int:
    return StablehloScatterOptionsStartScatterDimsToOperandDimsVector(builder, numElems)

def StablehloScatterOptionsAddIndexVectorDim(builder, indexVectorDim):
    builder.PrependInt64Slot(4, indexVectorDim, 0)

def AddIndexVectorDim(builder, indexVectorDim):
    StablehloScatterOptionsAddIndexVectorDim(builder, indexVectorDim)

def StablehloScatterOptionsAddUniqueIndices(builder, uniqueIndices):
    builder.PrependBoolSlot(5, uniqueIndices, 0)

def AddUniqueIndices(builder, uniqueIndices):
    StablehloScatterOptionsAddUniqueIndices(builder, uniqueIndices)

def StablehloScatterOptionsAddUpdateComputationSubgraphIndex(builder, updateComputationSubgraphIndex):
    builder.PrependInt32Slot(6, updateComputationSubgraphIndex, 0)

def AddUpdateComputationSubgraphIndex(builder, updateComputationSubgraphIndex):
    StablehloScatterOptionsAddUpdateComputationSubgraphIndex(builder, updateComputationSubgraphIndex)

def StablehloScatterOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloScatterOptionsEnd(builder)

try:
    from typing import List
except:
    pass

class StablehloScatterOptionsT(object):

    # StablehloScatterOptionsT
    def __init__(self):
        self.indicesAreSorted = False  # type: bool
        self.updateWindowDims = None  # type: List[int]
        self.insertedWindowDims = None  # type: List[int]
        self.scatterDimsToOperandDims = None  # type: List[int]
        self.indexVectorDim = 0  # type: int
        self.uniqueIndices = False  # type: bool
        self.updateComputationSubgraphIndex = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloScatterOptions = StablehloScatterOptions()
        stablehloScatterOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloScatterOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloScatterOptions):
        x = StablehloScatterOptionsT()
        x._UnPack(stablehloScatterOptions)
        return x

    # StablehloScatterOptionsT
    def _UnPack(self, stablehloScatterOptions):
        if stablehloScatterOptions is None:
            return
        self.indicesAreSorted = stablehloScatterOptions.IndicesAreSorted()
        if not stablehloScatterOptions.UpdateWindowDimsIsNone():
            if np is None:
                self.updateWindowDims = []
                for i in range(stablehloScatterOptions.UpdateWindowDimsLength()):
                    self.updateWindowDims.append(stablehloScatterOptions.UpdateWindowDims(i))
            else:
                self.updateWindowDims = stablehloScatterOptions.UpdateWindowDimsAsNumpy()
        if not stablehloScatterOptions.InsertedWindowDimsIsNone():
            if np is None:
                self.insertedWindowDims = []
                for i in range(stablehloScatterOptions.InsertedWindowDimsLength()):
                    self.insertedWindowDims.append(stablehloScatterOptions.InsertedWindowDims(i))
            else:
                self.insertedWindowDims = stablehloScatterOptions.InsertedWindowDimsAsNumpy()
        if not stablehloScatterOptions.ScatterDimsToOperandDimsIsNone():
            if np is None:
                self.scatterDimsToOperandDims = []
                for i in range(stablehloScatterOptions.ScatterDimsToOperandDimsLength()):
                    self.scatterDimsToOperandDims.append(stablehloScatterOptions.ScatterDimsToOperandDims(i))
            else:
                self.scatterDimsToOperandDims = stablehloScatterOptions.ScatterDimsToOperandDimsAsNumpy()
        self.indexVectorDim = stablehloScatterOptions.IndexVectorDim()
        self.uniqueIndices = stablehloScatterOptions.UniqueIndices()
        self.updateComputationSubgraphIndex = stablehloScatterOptions.UpdateComputationSubgraphIndex()

    # StablehloScatterOptionsT
    def Pack(self, builder):
        if self.updateWindowDims is not None:
            if np is not None and type(self.updateWindowDims) is np.ndarray:
                updateWindowDims = builder.CreateNumpyVector(self.updateWindowDims)
            else:
                StablehloScatterOptionsStartUpdateWindowDimsVector(builder, len(self.updateWindowDims))
                for i in reversed(range(len(self.updateWindowDims))):
                    builder.PrependInt64(self.updateWindowDims[i])
                updateWindowDims = builder.EndVector()
        if self.insertedWindowDims is not None:
            if np is not None and type(self.insertedWindowDims) is np.ndarray:
                insertedWindowDims = builder.CreateNumpyVector(self.insertedWindowDims)
            else:
                StablehloScatterOptionsStartInsertedWindowDimsVector(builder, len(self.insertedWindowDims))
                for i in reversed(range(len(self.insertedWindowDims))):
                    builder.PrependInt64(self.insertedWindowDims[i])
                insertedWindowDims = builder.EndVector()
        if self.scatterDimsToOperandDims is not None:
            if np is not None and type(self.scatterDimsToOperandDims) is np.ndarray:
                scatterDimsToOperandDims = builder.CreateNumpyVector(self.scatterDimsToOperandDims)
            else:
                StablehloScatterOptionsStartScatterDimsToOperandDimsVector(builder, len(self.scatterDimsToOperandDims))
                for i in reversed(range(len(self.scatterDimsToOperandDims))):
                    builder.PrependInt64(self.scatterDimsToOperandDims[i])
                scatterDimsToOperandDims = builder.EndVector()
        StablehloScatterOptionsStart(builder)
        StablehloScatterOptionsAddIndicesAreSorted(builder, self.indicesAreSorted)
        if self.updateWindowDims is not None:
            StablehloScatterOptionsAddUpdateWindowDims(builder, updateWindowDims)
        if self.insertedWindowDims is not None:
            StablehloScatterOptionsAddInsertedWindowDims(builder, insertedWindowDims)
        if self.scatterDimsToOperandDims is not None:
            StablehloScatterOptionsAddScatterDimsToOperandDims(builder, scatterDimsToOperandDims)
        StablehloScatterOptionsAddIndexVectorDim(builder, self.indexVectorDim)
        StablehloScatterOptionsAddUniqueIndices(builder, self.uniqueIndices)
        StablehloScatterOptionsAddUpdateComputationSubgraphIndex(builder, self.updateComputationSubgraphIndex)
        stablehloScatterOptions = StablehloScatterOptionsEnd(builder)
        return stablehloScatterOptions
