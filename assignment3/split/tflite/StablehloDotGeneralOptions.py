# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloDotGeneralOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloDotGeneralOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloDotGeneralOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloDotGeneralOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloDotGeneralOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloDotGeneralOptions
    def LhsBatchingDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloDotGeneralOptions
    def LhsBatchingDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDotGeneralOptions
    def LhsBatchingDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDotGeneralOptions
    def LhsBatchingDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # StablehloDotGeneralOptions
    def RhsBatchingDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloDotGeneralOptions
    def RhsBatchingDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDotGeneralOptions
    def RhsBatchingDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDotGeneralOptions
    def RhsBatchingDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # StablehloDotGeneralOptions
    def LhsContractingDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloDotGeneralOptions
    def LhsContractingDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDotGeneralOptions
    def LhsContractingDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDotGeneralOptions
    def LhsContractingDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # StablehloDotGeneralOptions
    def RhsContractingDimensions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # StablehloDotGeneralOptions
    def RhsContractingDimensionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # StablehloDotGeneralOptions
    def RhsContractingDimensionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDotGeneralOptions
    def RhsContractingDimensionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # StablehloDotGeneralOptions
    def PrecisionConfig(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # StablehloDotGeneralOptions
    def PrecisionConfigAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # StablehloDotGeneralOptions
    def PrecisionConfigLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # StablehloDotGeneralOptions
    def PrecisionConfigIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def StablehloDotGeneralOptionsStart(builder):
    builder.StartObject(5)

def Start(builder):
    StablehloDotGeneralOptionsStart(builder)

def StablehloDotGeneralOptionsAddLhsBatchingDimensions(builder, lhsBatchingDimensions):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(lhsBatchingDimensions), 0)

def AddLhsBatchingDimensions(builder, lhsBatchingDimensions):
    StablehloDotGeneralOptionsAddLhsBatchingDimensions(builder, lhsBatchingDimensions)

def StablehloDotGeneralOptionsStartLhsBatchingDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartLhsBatchingDimensionsVector(builder, numElems: int) -> int:
    return StablehloDotGeneralOptionsStartLhsBatchingDimensionsVector(builder, numElems)

def StablehloDotGeneralOptionsAddRhsBatchingDimensions(builder, rhsBatchingDimensions):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rhsBatchingDimensions), 0)

def AddRhsBatchingDimensions(builder, rhsBatchingDimensions):
    StablehloDotGeneralOptionsAddRhsBatchingDimensions(builder, rhsBatchingDimensions)

def StablehloDotGeneralOptionsStartRhsBatchingDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRhsBatchingDimensionsVector(builder, numElems: int) -> int:
    return StablehloDotGeneralOptionsStartRhsBatchingDimensionsVector(builder, numElems)

def StablehloDotGeneralOptionsAddLhsContractingDimensions(builder, lhsContractingDimensions):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(lhsContractingDimensions), 0)

def AddLhsContractingDimensions(builder, lhsContractingDimensions):
    StablehloDotGeneralOptionsAddLhsContractingDimensions(builder, lhsContractingDimensions)

def StablehloDotGeneralOptionsStartLhsContractingDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartLhsContractingDimensionsVector(builder, numElems: int) -> int:
    return StablehloDotGeneralOptionsStartLhsContractingDimensionsVector(builder, numElems)

def StablehloDotGeneralOptionsAddRhsContractingDimensions(builder, rhsContractingDimensions):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(rhsContractingDimensions), 0)

def AddRhsContractingDimensions(builder, rhsContractingDimensions):
    StablehloDotGeneralOptionsAddRhsContractingDimensions(builder, rhsContractingDimensions)

def StablehloDotGeneralOptionsStartRhsContractingDimensionsVector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartRhsContractingDimensionsVector(builder, numElems: int) -> int:
    return StablehloDotGeneralOptionsStartRhsContractingDimensionsVector(builder, numElems)

def StablehloDotGeneralOptionsAddPrecisionConfig(builder, precisionConfig):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(precisionConfig), 0)

def AddPrecisionConfig(builder, precisionConfig):
    StablehloDotGeneralOptionsAddPrecisionConfig(builder, precisionConfig)

def StablehloDotGeneralOptionsStartPrecisionConfigVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartPrecisionConfigVector(builder, numElems: int) -> int:
    return StablehloDotGeneralOptionsStartPrecisionConfigVector(builder, numElems)

def StablehloDotGeneralOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloDotGeneralOptionsEnd(builder)

try:
    from typing import List
except:
    pass

class StablehloDotGeneralOptionsT(object):

    # StablehloDotGeneralOptionsT
    def __init__(self):
        self.lhsBatchingDimensions = None  # type: List[int]
        self.rhsBatchingDimensions = None  # type: List[int]
        self.lhsContractingDimensions = None  # type: List[int]
        self.rhsContractingDimensions = None  # type: List[int]
        self.precisionConfig = None  # type: List[int]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloDotGeneralOptions = StablehloDotGeneralOptions()
        stablehloDotGeneralOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloDotGeneralOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloDotGeneralOptions):
        x = StablehloDotGeneralOptionsT()
        x._UnPack(stablehloDotGeneralOptions)
        return x

    # StablehloDotGeneralOptionsT
    def _UnPack(self, stablehloDotGeneralOptions):
        if stablehloDotGeneralOptions is None:
            return
        if not stablehloDotGeneralOptions.LhsBatchingDimensionsIsNone():
            if np is None:
                self.lhsBatchingDimensions = []
                for i in range(stablehloDotGeneralOptions.LhsBatchingDimensionsLength()):
                    self.lhsBatchingDimensions.append(stablehloDotGeneralOptions.LhsBatchingDimensions(i))
            else:
                self.lhsBatchingDimensions = stablehloDotGeneralOptions.LhsBatchingDimensionsAsNumpy()
        if not stablehloDotGeneralOptions.RhsBatchingDimensionsIsNone():
            if np is None:
                self.rhsBatchingDimensions = []
                for i in range(stablehloDotGeneralOptions.RhsBatchingDimensionsLength()):
                    self.rhsBatchingDimensions.append(stablehloDotGeneralOptions.RhsBatchingDimensions(i))
            else:
                self.rhsBatchingDimensions = stablehloDotGeneralOptions.RhsBatchingDimensionsAsNumpy()
        if not stablehloDotGeneralOptions.LhsContractingDimensionsIsNone():
            if np is None:
                self.lhsContractingDimensions = []
                for i in range(stablehloDotGeneralOptions.LhsContractingDimensionsLength()):
                    self.lhsContractingDimensions.append(stablehloDotGeneralOptions.LhsContractingDimensions(i))
            else:
                self.lhsContractingDimensions = stablehloDotGeneralOptions.LhsContractingDimensionsAsNumpy()
        if not stablehloDotGeneralOptions.RhsContractingDimensionsIsNone():
            if np is None:
                self.rhsContractingDimensions = []
                for i in range(stablehloDotGeneralOptions.RhsContractingDimensionsLength()):
                    self.rhsContractingDimensions.append(stablehloDotGeneralOptions.RhsContractingDimensions(i))
            else:
                self.rhsContractingDimensions = stablehloDotGeneralOptions.RhsContractingDimensionsAsNumpy()
        if not stablehloDotGeneralOptions.PrecisionConfigIsNone():
            if np is None:
                self.precisionConfig = []
                for i in range(stablehloDotGeneralOptions.PrecisionConfigLength()):
                    self.precisionConfig.append(stablehloDotGeneralOptions.PrecisionConfig(i))
            else:
                self.precisionConfig = stablehloDotGeneralOptions.PrecisionConfigAsNumpy()

    # StablehloDotGeneralOptionsT
    def Pack(self, builder):
        if self.lhsBatchingDimensions is not None:
            if np is not None and type(self.lhsBatchingDimensions) is np.ndarray:
                lhsBatchingDimensions = builder.CreateNumpyVector(self.lhsBatchingDimensions)
            else:
                StablehloDotGeneralOptionsStartLhsBatchingDimensionsVector(builder, len(self.lhsBatchingDimensions))
                for i in reversed(range(len(self.lhsBatchingDimensions))):
                    builder.PrependInt64(self.lhsBatchingDimensions[i])
                lhsBatchingDimensions = builder.EndVector()
        if self.rhsBatchingDimensions is not None:
            if np is not None and type(self.rhsBatchingDimensions) is np.ndarray:
                rhsBatchingDimensions = builder.CreateNumpyVector(self.rhsBatchingDimensions)
            else:
                StablehloDotGeneralOptionsStartRhsBatchingDimensionsVector(builder, len(self.rhsBatchingDimensions))
                for i in reversed(range(len(self.rhsBatchingDimensions))):
                    builder.PrependInt64(self.rhsBatchingDimensions[i])
                rhsBatchingDimensions = builder.EndVector()
        if self.lhsContractingDimensions is not None:
            if np is not None and type(self.lhsContractingDimensions) is np.ndarray:
                lhsContractingDimensions = builder.CreateNumpyVector(self.lhsContractingDimensions)
            else:
                StablehloDotGeneralOptionsStartLhsContractingDimensionsVector(builder, len(self.lhsContractingDimensions))
                for i in reversed(range(len(self.lhsContractingDimensions))):
                    builder.PrependInt64(self.lhsContractingDimensions[i])
                lhsContractingDimensions = builder.EndVector()
        if self.rhsContractingDimensions is not None:
            if np is not None and type(self.rhsContractingDimensions) is np.ndarray:
                rhsContractingDimensions = builder.CreateNumpyVector(self.rhsContractingDimensions)
            else:
                StablehloDotGeneralOptionsStartRhsContractingDimensionsVector(builder, len(self.rhsContractingDimensions))
                for i in reversed(range(len(self.rhsContractingDimensions))):
                    builder.PrependInt64(self.rhsContractingDimensions[i])
                rhsContractingDimensions = builder.EndVector()
        if self.precisionConfig is not None:
            if np is not None and type(self.precisionConfig) is np.ndarray:
                precisionConfig = builder.CreateNumpyVector(self.precisionConfig)
            else:
                StablehloDotGeneralOptionsStartPrecisionConfigVector(builder, len(self.precisionConfig))
                for i in reversed(range(len(self.precisionConfig))):
                    builder.PrependUint32(self.precisionConfig[i])
                precisionConfig = builder.EndVector()
        StablehloDotGeneralOptionsStart(builder)
        if self.lhsBatchingDimensions is not None:
            StablehloDotGeneralOptionsAddLhsBatchingDimensions(builder, lhsBatchingDimensions)
        if self.rhsBatchingDimensions is not None:
            StablehloDotGeneralOptionsAddRhsBatchingDimensions(builder, rhsBatchingDimensions)
        if self.lhsContractingDimensions is not None:
            StablehloDotGeneralOptionsAddLhsContractingDimensions(builder, lhsContractingDimensions)
        if self.rhsContractingDimensions is not None:
            StablehloDotGeneralOptionsAddRhsContractingDimensions(builder, rhsContractingDimensions)
        if self.precisionConfig is not None:
            StablehloDotGeneralOptionsAddPrecisionConfig(builder, precisionConfig)
        stablehloDotGeneralOptions = StablehloDotGeneralOptionsEnd(builder)
        return stablehloDotGeneralOptions
