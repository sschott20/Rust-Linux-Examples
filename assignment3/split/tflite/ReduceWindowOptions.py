# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ReduceWindowOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ReduceWindowOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsReduceWindowOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def ReduceWindowOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # ReduceWindowOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ReduceWindowOptions
    def ReduceFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ReduceWindowOptionsStart(builder):
    builder.StartObject(1)

def Start(builder):
    ReduceWindowOptionsStart(builder)

def ReduceWindowOptionsAddReduceFunction(builder, reduceFunction):
    builder.PrependInt32Slot(0, reduceFunction, 0)

def AddReduceFunction(builder, reduceFunction):
    ReduceWindowOptionsAddReduceFunction(builder, reduceFunction)

def ReduceWindowOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return ReduceWindowOptionsEnd(builder)


class ReduceWindowOptionsT(object):

    # ReduceWindowOptionsT
    def __init__(self):
        self.reduceFunction = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        reduceWindowOptions = ReduceWindowOptions()
        reduceWindowOptions.Init(buf, pos)
        return cls.InitFromObj(reduceWindowOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, reduceWindowOptions):
        x = ReduceWindowOptionsT()
        x._UnPack(reduceWindowOptions)
        return x

    # ReduceWindowOptionsT
    def _UnPack(self, reduceWindowOptions):
        if reduceWindowOptions is None:
            return
        self.reduceFunction = reduceWindowOptions.ReduceFunction()

    # ReduceWindowOptionsT
    def Pack(self, builder):
        ReduceWindowOptionsStart(builder)
        ReduceWindowOptionsAddReduceFunction(builder, self.reduceFunction)
        reduceWindowOptions = ReduceWindowOptionsEnd(builder)
        return reduceWindowOptions
