# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Conv2DOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Conv2DOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsConv2DOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def Conv2DOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # Conv2DOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Conv2DOptions
    def Padding(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Conv2DOptions
    def StrideW(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv2DOptions
    def StrideH(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Conv2DOptions
    def FusedActivationFunction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Conv2DOptions
    def DilationWFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Conv2DOptions
    def DilationHFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 1

    # Conv2DOptions
    def QuantizedBiasType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def Conv2DOptionsStart(builder):
    builder.StartObject(7)

def Start(builder):
    Conv2DOptionsStart(builder)

def Conv2DOptionsAddPadding(builder, padding):
    builder.PrependInt8Slot(0, padding, 0)

def AddPadding(builder, padding):
    Conv2DOptionsAddPadding(builder, padding)

def Conv2DOptionsAddStrideW(builder, strideW):
    builder.PrependInt32Slot(1, strideW, 0)

def AddStrideW(builder, strideW):
    Conv2DOptionsAddStrideW(builder, strideW)

def Conv2DOptionsAddStrideH(builder, strideH):
    builder.PrependInt32Slot(2, strideH, 0)

def AddStrideH(builder, strideH):
    Conv2DOptionsAddStrideH(builder, strideH)

def Conv2DOptionsAddFusedActivationFunction(builder, fusedActivationFunction):
    builder.PrependInt8Slot(3, fusedActivationFunction, 0)

def AddFusedActivationFunction(builder, fusedActivationFunction):
    Conv2DOptionsAddFusedActivationFunction(builder, fusedActivationFunction)

def Conv2DOptionsAddDilationWFactor(builder, dilationWFactor):
    builder.PrependInt32Slot(4, dilationWFactor, 1)

def AddDilationWFactor(builder, dilationWFactor):
    Conv2DOptionsAddDilationWFactor(builder, dilationWFactor)

def Conv2DOptionsAddDilationHFactor(builder, dilationHFactor):
    builder.PrependInt32Slot(5, dilationHFactor, 1)

def AddDilationHFactor(builder, dilationHFactor):
    Conv2DOptionsAddDilationHFactor(builder, dilationHFactor)

def Conv2DOptionsAddQuantizedBiasType(builder, quantizedBiasType):
    builder.PrependInt8Slot(6, quantizedBiasType, 0)

def AddQuantizedBiasType(builder, quantizedBiasType):
    Conv2DOptionsAddQuantizedBiasType(builder, quantizedBiasType)

def Conv2DOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return Conv2DOptionsEnd(builder)


class Conv2DOptionsT(object):

    # Conv2DOptionsT
    def __init__(self):
        self.padding = 0  # type: int
        self.strideW = 0  # type: int
        self.strideH = 0  # type: int
        self.fusedActivationFunction = 0  # type: int
        self.dilationWFactor = 1  # type: int
        self.dilationHFactor = 1  # type: int
        self.quantizedBiasType = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        conv2Doptions = Conv2DOptions()
        conv2Doptions.Init(buf, pos)
        return cls.InitFromObj(conv2Doptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, conv2Doptions):
        x = Conv2DOptionsT()
        x._UnPack(conv2Doptions)
        return x

    # Conv2DOptionsT
    def _UnPack(self, conv2Doptions):
        if conv2Doptions is None:
            return
        self.padding = conv2Doptions.Padding()
        self.strideW = conv2Doptions.StrideW()
        self.strideH = conv2Doptions.StrideH()
        self.fusedActivationFunction = conv2Doptions.FusedActivationFunction()
        self.dilationWFactor = conv2Doptions.DilationWFactor()
        self.dilationHFactor = conv2Doptions.DilationHFactor()
        self.quantizedBiasType = conv2Doptions.QuantizedBiasType()

    # Conv2DOptionsT
    def Pack(self, builder):
        Conv2DOptionsStart(builder)
        Conv2DOptionsAddPadding(builder, self.padding)
        Conv2DOptionsAddStrideW(builder, self.strideW)
        Conv2DOptionsAddStrideH(builder, self.strideH)
        Conv2DOptionsAddFusedActivationFunction(builder, self.fusedActivationFunction)
        Conv2DOptionsAddDilationWFactor(builder, self.dilationWFactor)
        Conv2DOptionsAddDilationHFactor(builder, self.dilationHFactor)
        Conv2DOptionsAddQuantizedBiasType(builder, self.quantizedBiasType)
        conv2Doptions = Conv2DOptionsEnd(builder)
        return conv2Doptions
