# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class StablehloIotaOptions(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = StablehloIotaOptions()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsStablehloIotaOptions(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def StablehloIotaOptionsBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # StablehloIotaOptions
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # StablehloIotaOptions
    def IotaDimension(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def StablehloIotaOptionsStart(builder):
    builder.StartObject(1)

def Start(builder):
    StablehloIotaOptionsStart(builder)

def StablehloIotaOptionsAddIotaDimension(builder, iotaDimension):
    builder.PrependInt64Slot(0, iotaDimension, 0)

def AddIotaDimension(builder, iotaDimension):
    StablehloIotaOptionsAddIotaDimension(builder, iotaDimension)

def StablehloIotaOptionsEnd(builder):
    return builder.EndObject()

def End(builder):
    return StablehloIotaOptionsEnd(builder)


class StablehloIotaOptionsT(object):

    # StablehloIotaOptionsT
    def __init__(self):
        self.iotaDimension = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        stablehloIotaOptions = StablehloIotaOptions()
        stablehloIotaOptions.Init(buf, pos)
        return cls.InitFromObj(stablehloIotaOptions)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, stablehloIotaOptions):
        x = StablehloIotaOptionsT()
        x._UnPack(stablehloIotaOptions)
        return x

    # StablehloIotaOptionsT
    def _UnPack(self, stablehloIotaOptions):
        if stablehloIotaOptions is None:
            return
        self.iotaDimension = stablehloIotaOptions.IotaDimension()

    # StablehloIotaOptionsT
    def Pack(self, builder):
        StablehloIotaOptionsStart(builder)
        StablehloIotaOptionsAddIotaDimension(builder, self.iotaDimension)
        stablehloIotaOptions = StablehloIotaOptionsEnd(builder)
        return stablehloIotaOptions
