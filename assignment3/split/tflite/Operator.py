# automatically generated by the FlatBuffers compiler, do not modify

# namespace: tflite

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Operator(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Operator()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsOperator(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def OperatorBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x54\x46\x4C\x33", size_prefixed=size_prefixed)

    # Operator
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Operator
    def OpcodeIndex(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # Operator
    def Inputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def InputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def InputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def InputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        return o == 0

    # Operator
    def Outputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def OutputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def OutputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def OutputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Operator
    def BuiltinOptionsType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

    # Operator
    def CustomOptions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def CustomOptionsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # Operator
    def CustomOptionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def CustomOptionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Operator
    def CustomOptionsFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def MutatingVariableInputs(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # Operator
    def MutatingVariableInputsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # Operator
    def MutatingVariableInputsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def MutatingVariableInputsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Operator
    def Intermediates(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Operator
    def IntermediatesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Operator
    def IntermediatesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Operator
    def IntermediatesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # Operator
    def LargeCustomOptionsOffset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def LargeCustomOptionsSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # Operator
    def BuiltinOptions2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            from flatbuffers.table import Table
            obj = Table(bytearray(), 0)
            self._tab.Union(obj, o)
            return obj
        return None

def OperatorStart(builder):
    builder.StartObject(13)

def Start(builder):
    OperatorStart(builder)

def OperatorAddOpcodeIndex(builder, opcodeIndex):
    builder.PrependUint32Slot(0, opcodeIndex, 0)

def AddOpcodeIndex(builder, opcodeIndex):
    OperatorAddOpcodeIndex(builder, opcodeIndex)

def OperatorAddInputs(builder, inputs):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(inputs), 0)

def AddInputs(builder, inputs):
    OperatorAddInputs(builder, inputs)

def OperatorStartInputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartInputsVector(builder, numElems: int) -> int:
    return OperatorStartInputsVector(builder, numElems)

def OperatorAddOutputs(builder, outputs):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(outputs), 0)

def AddOutputs(builder, outputs):
    OperatorAddOutputs(builder, outputs)

def OperatorStartOutputsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartOutputsVector(builder, numElems: int) -> int:
    return OperatorStartOutputsVector(builder, numElems)

def OperatorAddBuiltinOptionsType(builder, builtinOptionsType):
    builder.PrependUint8Slot(3, builtinOptionsType, 0)

def AddBuiltinOptionsType(builder, builtinOptionsType):
    OperatorAddBuiltinOptionsType(builder, builtinOptionsType)

def OperatorAddBuiltinOptions(builder, builtinOptions):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions), 0)

def AddBuiltinOptions(builder, builtinOptions):
    OperatorAddBuiltinOptions(builder, builtinOptions)

def OperatorAddCustomOptions(builder, customOptions):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(customOptions), 0)

def AddCustomOptions(builder, customOptions):
    OperatorAddCustomOptions(builder, customOptions)

def OperatorStartCustomOptionsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartCustomOptionsVector(builder, numElems: int) -> int:
    return OperatorStartCustomOptionsVector(builder, numElems)

def OperatorAddCustomOptionsFormat(builder, customOptionsFormat):
    builder.PrependInt8Slot(6, customOptionsFormat, 0)

def AddCustomOptionsFormat(builder, customOptionsFormat):
    OperatorAddCustomOptionsFormat(builder, customOptionsFormat)

def OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(mutatingVariableInputs), 0)

def AddMutatingVariableInputs(builder, mutatingVariableInputs):
    OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)

def OperatorStartMutatingVariableInputsVector(builder, numElems):
    return builder.StartVector(1, numElems, 1)

def StartMutatingVariableInputsVector(builder, numElems: int) -> int:
    return OperatorStartMutatingVariableInputsVector(builder, numElems)

def OperatorAddIntermediates(builder, intermediates):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(intermediates), 0)

def AddIntermediates(builder, intermediates):
    OperatorAddIntermediates(builder, intermediates)

def OperatorStartIntermediatesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartIntermediatesVector(builder, numElems: int) -> int:
    return OperatorStartIntermediatesVector(builder, numElems)

def OperatorAddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset):
    builder.PrependUint64Slot(9, largeCustomOptionsOffset, 0)

def AddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset):
    OperatorAddLargeCustomOptionsOffset(builder, largeCustomOptionsOffset)

def OperatorAddLargeCustomOptionsSize(builder, largeCustomOptionsSize):
    builder.PrependUint64Slot(10, largeCustomOptionsSize, 0)

def AddLargeCustomOptionsSize(builder, largeCustomOptionsSize):
    OperatorAddLargeCustomOptionsSize(builder, largeCustomOptionsSize)

def OperatorAddBuiltinOptions2Type(builder, builtinOptions2Type):
    builder.PrependUint8Slot(11, builtinOptions2Type, 0)

def AddBuiltinOptions2Type(builder, builtinOptions2Type):
    OperatorAddBuiltinOptions2Type(builder, builtinOptions2Type)

def OperatorAddBuiltinOptions2(builder, builtinOptions2):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(builtinOptions2), 0)

def AddBuiltinOptions2(builder, builtinOptions2):
    OperatorAddBuiltinOptions2(builder, builtinOptions2)

def OperatorEnd(builder):
    return builder.EndObject()

def End(builder):
    return OperatorEnd(builder)

import tflite.ATan2Options
import tflite.AbsOptions
import tflite.AddNOptions
import tflite.AddOptions
import tflite.ArgMaxOptions
import tflite.ArgMinOptions
import tflite.AssignVariableOptions
import tflite.BatchMatMulOptions
import tflite.BatchToSpaceNDOptions
import tflite.BidirectionalSequenceLSTMOptions
import tflite.BidirectionalSequenceRNNOptions
import tflite.BitcastOptions
import tflite.BitwiseXorOptions
import tflite.BroadcastToOptions
import tflite.BucketizeOptions
import tflite.BuiltinOptions
import tflite.BuiltinOptions2
import tflite.CallOnceOptions
import tflite.CallOptions
import tflite.CastOptions
import tflite.ConcatEmbeddingsOptions
import tflite.ConcatenationOptions
import tflite.Conv2DOptions
import tflite.Conv3DOptions
import tflite.CosOptions
import tflite.CumsumOptions
import tflite.DensifyOptions
import tflite.DepthToSpaceOptions
import tflite.DepthwiseConv2DOptions
import tflite.DequantizeOptions
import tflite.DilateOptions
import tflite.DivOptions
import tflite.DynamicUpdateSliceOptions
import tflite.EmbeddingLookupSparseOptions
import tflite.EqualOptions
import tflite.ExpOptions
import tflite.ExpandDimsOptions
import tflite.FakeQuantOptions
import tflite.FillOptions
import tflite.FloorDivOptions
import tflite.FloorModOptions
import tflite.FullyConnectedOptions
import tflite.GatherNdOptions
import tflite.GatherOptions
import tflite.GeluOptions
import tflite.GreaterEqualOptions
import tflite.GreaterOptions
import tflite.HardSwishOptions
import tflite.HashtableFindOptions
import tflite.HashtableImportOptions
import tflite.HashtableOptions
import tflite.HashtableSizeOptions
import tflite.IfOptions
import tflite.L2NormOptions
import tflite.LSHProjectionOptions
import tflite.LSTMOptions
import tflite.LeakyReluOptions
import tflite.LessEqualOptions
import tflite.LessOptions
import tflite.LocalResponseNormalizationOptions
import tflite.LogSoftmaxOptions
import tflite.LogicalAndOptions
import tflite.LogicalNotOptions
import tflite.LogicalOrOptions
import tflite.MatrixDiagOptions
import tflite.MatrixSetDiagOptions
import tflite.MaximumMinimumOptions
import tflite.MirrorPadOptions
import tflite.MulOptions
import tflite.NegOptions
import tflite.NonMaxSuppressionV4Options
import tflite.NonMaxSuppressionV5Options
import tflite.NotEqualOptions
import tflite.OneHotOptions
import tflite.PackOptions
import tflite.PadOptions
import tflite.PadV2Options
import tflite.Pool2DOptions
import tflite.PowOptions
import tflite.QuantizeOptions
import tflite.RNNOptions
import tflite.RandomOptions
import tflite.RangeOptions
import tflite.RankOptions
import tflite.ReadVariableOptions
import tflite.ReduceWindowOptions
import tflite.ReducerOptions
import tflite.ReshapeOptions
import tflite.ResizeBilinearOptions
import tflite.ResizeNearestNeighborOptions
import tflite.ReverseSequenceOptions
import tflite.ReverseV2Options
import tflite.Rfft2dOptions
import tflite.RightShiftOptions
import tflite.SVDFOptions
import tflite.ScatterNdOptions
import tflite.SegmentSumOptions
import tflite.SelectOptions
import tflite.SelectV2Options
import tflite.SequenceRNNOptions
import tflite.ShapeOptions
import tflite.SignOptions
import tflite.SkipGramOptions
import tflite.SliceOptions
import tflite.SoftmaxOptions
import tflite.SpaceToBatchNDOptions
import tflite.SpaceToDepthOptions
import tflite.SparseToDenseOptions
import tflite.SplitOptions
import tflite.SplitVOptions
import tflite.SquareOptions
import tflite.SquaredDifferenceOptions
import tflite.SqueezeOptions
import tflite.StablehloBroadcastInDimOptions
import tflite.StablehloCompareOptions
import tflite.StablehloConcatenateOptions
import tflite.StablehloConvolutionOptions
import tflite.StablehloCustomCallOptions
import tflite.StablehloDotGeneralOptions
import tflite.StablehloDynamicSliceOptions
import tflite.StablehloGatherOptions
import tflite.StablehloIotaOptions
import tflite.StablehloPadOptions
import tflite.StablehloReduceOptions
import tflite.StablehloReduceWindowOptions
import tflite.StablehloRngBitGeneratorOptions
import tflite.StablehloScatterOptions
import tflite.StablehloSliceOptions
import tflite.StablehloSortOptions
import tflite.StablehloTransposeOptions
import tflite.StablehloWhileOptions
import tflite.StridedSliceOptions
import tflite.SubOptions
import tflite.TileOptions
import tflite.TopKV2Options
import tflite.TransposeConvOptions
import tflite.TransposeOptions
import tflite.UnidirectionalSequenceLSTMOptions
import tflite.UniqueOptions
import tflite.UnpackOptions
import tflite.UnsortedSegmentMaxOptions
import tflite.UnsortedSegmentMinOptions
import tflite.UnsortedSegmentProdOptions
import tflite.UnsortedSegmentSumOptions
import tflite.VarHandleOptions
import tflite.WhereOptions
import tflite.WhileOptions
import tflite.ZerosLikeOptions
try:
    from typing import List, Union
except:
    pass

class OperatorT(object):

    # OperatorT
    def __init__(self):
        self.opcodeIndex = 0  # type: int
        self.inputs = None  # type: List[int]
        self.outputs = None  # type: List[int]
        self.builtinOptionsType = 0  # type: int
        self.builtinOptions = None  # type: Union[None, tflite.Conv2DOptions.Conv2DOptionsT, tflite.DepthwiseConv2DOptions.DepthwiseConv2DOptionsT, tflite.ConcatEmbeddingsOptions.ConcatEmbeddingsOptionsT, tflite.LSHProjectionOptions.LSHProjectionOptionsT, tflite.Pool2DOptions.Pool2DOptionsT, tflite.SVDFOptions.SVDFOptionsT, tflite.RNNOptions.RNNOptionsT, tflite.FullyConnectedOptions.FullyConnectedOptionsT, tflite.SoftmaxOptions.SoftmaxOptionsT, tflite.ConcatenationOptions.ConcatenationOptionsT, tflite.AddOptions.AddOptionsT, tflite.L2NormOptions.L2NormOptionsT, tflite.LocalResponseNormalizationOptions.LocalResponseNormalizationOptionsT, tflite.LSTMOptions.LSTMOptionsT, tflite.ResizeBilinearOptions.ResizeBilinearOptionsT, tflite.CallOptions.CallOptionsT, tflite.ReshapeOptions.ReshapeOptionsT, tflite.SkipGramOptions.SkipGramOptionsT, tflite.SpaceToDepthOptions.SpaceToDepthOptionsT, tflite.EmbeddingLookupSparseOptions.EmbeddingLookupSparseOptionsT, tflite.MulOptions.MulOptionsT, tflite.PadOptions.PadOptionsT, tflite.GatherOptions.GatherOptionsT, tflite.BatchToSpaceNDOptions.BatchToSpaceNDOptionsT, tflite.SpaceToBatchNDOptions.SpaceToBatchNDOptionsT, tflite.TransposeOptions.TransposeOptionsT, tflite.ReducerOptions.ReducerOptionsT, tflite.SubOptions.SubOptionsT, tflite.DivOptions.DivOptionsT, tflite.SqueezeOptions.SqueezeOptionsT, tflite.SequenceRNNOptions.SequenceRNNOptionsT, tflite.StridedSliceOptions.StridedSliceOptionsT, tflite.ExpOptions.ExpOptionsT, tflite.TopKV2Options.TopKV2OptionsT, tflite.SplitOptions.SplitOptionsT, tflite.LogSoftmaxOptions.LogSoftmaxOptionsT, tflite.CastOptions.CastOptionsT, tflite.DequantizeOptions.DequantizeOptionsT, tflite.MaximumMinimumOptions.MaximumMinimumOptionsT, tflite.ArgMaxOptions.ArgMaxOptionsT, tflite.LessOptions.LessOptionsT, tflite.NegOptions.NegOptionsT, tflite.PadV2Options.PadV2OptionsT, tflite.GreaterOptions.GreaterOptionsT, tflite.GreaterEqualOptions.GreaterEqualOptionsT, tflite.LessEqualOptions.LessEqualOptionsT, tflite.SelectOptions.SelectOptionsT, tflite.SliceOptions.SliceOptionsT, tflite.TransposeConvOptions.TransposeConvOptionsT, tflite.SparseToDenseOptions.SparseToDenseOptionsT, tflite.TileOptions.TileOptionsT, tflite.ExpandDimsOptions.ExpandDimsOptionsT, tflite.EqualOptions.EqualOptionsT, tflite.NotEqualOptions.NotEqualOptionsT, tflite.ShapeOptions.ShapeOptionsT, tflite.PowOptions.PowOptionsT, tflite.ArgMinOptions.ArgMinOptionsT, tflite.FakeQuantOptions.FakeQuantOptionsT, tflite.PackOptions.PackOptionsT, tflite.LogicalOrOptions.LogicalOrOptionsT, tflite.OneHotOptions.OneHotOptionsT, tflite.LogicalAndOptions.LogicalAndOptionsT, tflite.LogicalNotOptions.LogicalNotOptionsT, tflite.UnpackOptions.UnpackOptionsT, tflite.FloorDivOptions.FloorDivOptionsT, tflite.SquareOptions.SquareOptionsT, tflite.ZerosLikeOptions.ZerosLikeOptionsT, tflite.FillOptions.FillOptionsT, tflite.BidirectionalSequenceLSTMOptions.BidirectionalSequenceLSTMOptionsT, tflite.BidirectionalSequenceRNNOptions.BidirectionalSequenceRNNOptionsT, tflite.UnidirectionalSequenceLSTMOptions.UnidirectionalSequenceLSTMOptionsT, tflite.FloorModOptions.FloorModOptionsT, tflite.RangeOptions.RangeOptionsT, tflite.ResizeNearestNeighborOptions.ResizeNearestNeighborOptionsT, tflite.LeakyReluOptions.LeakyReluOptionsT, tflite.SquaredDifferenceOptions.SquaredDifferenceOptionsT, tflite.MirrorPadOptions.MirrorPadOptionsT, tflite.AbsOptions.AbsOptionsT, tflite.SplitVOptions.SplitVOptionsT, tflite.UniqueOptions.UniqueOptionsT, tflite.ReverseV2Options.ReverseV2OptionsT, tflite.AddNOptions.AddNOptionsT, tflite.GatherNdOptions.GatherNdOptionsT, tflite.CosOptions.CosOptionsT, tflite.WhereOptions.WhereOptionsT, tflite.RankOptions.RankOptionsT, tflite.ReverseSequenceOptions.ReverseSequenceOptionsT, tflite.MatrixDiagOptions.MatrixDiagOptionsT, tflite.QuantizeOptions.QuantizeOptionsT, tflite.MatrixSetDiagOptions.MatrixSetDiagOptionsT, tflite.HardSwishOptions.HardSwishOptionsT, tflite.IfOptions.IfOptionsT, tflite.WhileOptions.WhileOptionsT, tflite.DepthToSpaceOptions.DepthToSpaceOptionsT, tflite.NonMaxSuppressionV4Options.NonMaxSuppressionV4OptionsT, tflite.NonMaxSuppressionV5Options.NonMaxSuppressionV5OptionsT, tflite.ScatterNdOptions.ScatterNdOptionsT, tflite.SelectV2Options.SelectV2OptionsT, tflite.DensifyOptions.DensifyOptionsT, tflite.SegmentSumOptions.SegmentSumOptionsT, tflite.BatchMatMulOptions.BatchMatMulOptionsT, tflite.CumsumOptions.CumsumOptionsT, tflite.CallOnceOptions.CallOnceOptionsT, tflite.BroadcastToOptions.BroadcastToOptionsT, tflite.Rfft2dOptions.Rfft2dOptionsT, tflite.Conv3DOptions.Conv3DOptionsT, tflite.HashtableOptions.HashtableOptionsT, tflite.HashtableFindOptions.HashtableFindOptionsT, tflite.HashtableImportOptions.HashtableImportOptionsT, tflite.HashtableSizeOptions.HashtableSizeOptionsT, tflite.VarHandleOptions.VarHandleOptionsT, tflite.ReadVariableOptions.ReadVariableOptionsT, tflite.AssignVariableOptions.AssignVariableOptionsT, tflite.RandomOptions.RandomOptionsT, tflite.BucketizeOptions.BucketizeOptionsT, tflite.GeluOptions.GeluOptionsT, tflite.DynamicUpdateSliceOptions.DynamicUpdateSliceOptionsT, tflite.UnsortedSegmentProdOptions.UnsortedSegmentProdOptionsT, tflite.UnsortedSegmentMaxOptions.UnsortedSegmentMaxOptionsT, tflite.UnsortedSegmentMinOptions.UnsortedSegmentMinOptionsT, tflite.UnsortedSegmentSumOptions.UnsortedSegmentSumOptionsT, tflite.ATan2Options.ATan2OptionsT, tflite.SignOptions.SignOptionsT, tflite.BitcastOptions.BitcastOptionsT, tflite.BitwiseXorOptions.BitwiseXorOptionsT, tflite.RightShiftOptions.RightShiftOptionsT]
        self.customOptions = None  # type: List[int]
        self.customOptionsFormat = 0  # type: int
        self.mutatingVariableInputs = None  # type: List[bool]
        self.intermediates = None  # type: List[int]
        self.largeCustomOptionsOffset = 0  # type: int
        self.largeCustomOptionsSize = 0  # type: int
        self.builtinOptions2Type = 0  # type: int
        self.builtinOptions2 = None  # type: Union[None, tflite.StablehloConcatenateOptions.StablehloConcatenateOptionsT, tflite.StablehloBroadcastInDimOptions.StablehloBroadcastInDimOptionsT, tflite.StablehloSliceOptions.StablehloSliceOptionsT, tflite.StablehloConvolutionOptions.StablehloConvolutionOptionsT, tflite.StablehloCustomCallOptions.StablehloCustomCallOptionsT, tflite.StablehloReduceOptions.StablehloReduceOptionsT, tflite.StablehloScatterOptions.StablehloScatterOptionsT, tflite.StablehloCompareOptions.StablehloCompareOptionsT, tflite.StablehloDynamicSliceOptions.StablehloDynamicSliceOptionsT, tflite.StablehloPadOptions.StablehloPadOptionsT, tflite.StablehloIotaOptions.StablehloIotaOptionsT, tflite.StablehloDotGeneralOptions.StablehloDotGeneralOptionsT, tflite.StablehloReduceWindowOptions.StablehloReduceWindowOptionsT, tflite.StablehloSortOptions.StablehloSortOptionsT, tflite.StablehloWhileOptions.StablehloWhileOptionsT, tflite.StablehloGatherOptions.StablehloGatherOptionsT, tflite.StablehloTransposeOptions.StablehloTransposeOptionsT, tflite.DilateOptions.DilateOptionsT, tflite.StablehloRngBitGeneratorOptions.StablehloRngBitGeneratorOptionsT, tflite.ReduceWindowOptions.ReduceWindowOptionsT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        operator = Operator()
        operator.Init(buf, pos)
        return cls.InitFromObj(operator)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, operator):
        x = OperatorT()
        x._UnPack(operator)
        return x

    # OperatorT
    def _UnPack(self, operator):
        if operator is None:
            return
        self.opcodeIndex = operator.OpcodeIndex()
        if not operator.InputsIsNone():
            if np is None:
                self.inputs = []
                for i in range(operator.InputsLength()):
                    self.inputs.append(operator.Inputs(i))
            else:
                self.inputs = operator.InputsAsNumpy()
        if not operator.OutputsIsNone():
            if np is None:
                self.outputs = []
                for i in range(operator.OutputsLength()):
                    self.outputs.append(operator.Outputs(i))
            else:
                self.outputs = operator.OutputsAsNumpy()
        self.builtinOptionsType = operator.BuiltinOptionsType()
        self.builtinOptions = tflite.BuiltinOptions.BuiltinOptionsCreator(self.builtinOptionsType, operator.BuiltinOptions())
        if not operator.CustomOptionsIsNone():
            if np is None:
                self.customOptions = []
                for i in range(operator.CustomOptionsLength()):
                    self.customOptions.append(operator.CustomOptions(i))
            else:
                self.customOptions = operator.CustomOptionsAsNumpy()
        self.customOptionsFormat = operator.CustomOptionsFormat()
        if not operator.MutatingVariableInputsIsNone():
            if np is None:
                self.mutatingVariableInputs = []
                for i in range(operator.MutatingVariableInputsLength()):
                    self.mutatingVariableInputs.append(operator.MutatingVariableInputs(i))
            else:
                self.mutatingVariableInputs = operator.MutatingVariableInputsAsNumpy()
        if not operator.IntermediatesIsNone():
            if np is None:
                self.intermediates = []
                for i in range(operator.IntermediatesLength()):
                    self.intermediates.append(operator.Intermediates(i))
            else:
                self.intermediates = operator.IntermediatesAsNumpy()
        self.largeCustomOptionsOffset = operator.LargeCustomOptionsOffset()
        self.largeCustomOptionsSize = operator.LargeCustomOptionsSize()
        self.builtinOptions2Type = operator.BuiltinOptions2Type()
        self.builtinOptions2 = tflite.BuiltinOptions2.BuiltinOptions2Creator(self.builtinOptions2Type, operator.BuiltinOptions2())

    # OperatorT
    def Pack(self, builder):
        if self.inputs is not None:
            if np is not None and type(self.inputs) is np.ndarray:
                inputs = builder.CreateNumpyVector(self.inputs)
            else:
                OperatorStartInputsVector(builder, len(self.inputs))
                for i in reversed(range(len(self.inputs))):
                    builder.PrependInt32(self.inputs[i])
                inputs = builder.EndVector()
        if self.outputs is not None:
            if np is not None and type(self.outputs) is np.ndarray:
                outputs = builder.CreateNumpyVector(self.outputs)
            else:
                OperatorStartOutputsVector(builder, len(self.outputs))
                for i in reversed(range(len(self.outputs))):
                    builder.PrependInt32(self.outputs[i])
                outputs = builder.EndVector()
        if self.builtinOptions is not None:
            builtinOptions = self.builtinOptions.Pack(builder)
        if self.customOptions is not None:
            if np is not None and type(self.customOptions) is np.ndarray:
                customOptions = builder.CreateNumpyVector(self.customOptions)
            else:
                OperatorStartCustomOptionsVector(builder, len(self.customOptions))
                for i in reversed(range(len(self.customOptions))):
                    builder.PrependUint8(self.customOptions[i])
                customOptions = builder.EndVector()
        if self.mutatingVariableInputs is not None:
            if np is not None and type(self.mutatingVariableInputs) is np.ndarray:
                mutatingVariableInputs = builder.CreateNumpyVector(self.mutatingVariableInputs)
            else:
                OperatorStartMutatingVariableInputsVector(builder, len(self.mutatingVariableInputs))
                for i in reversed(range(len(self.mutatingVariableInputs))):
                    builder.PrependBool(self.mutatingVariableInputs[i])
                mutatingVariableInputs = builder.EndVector()
        if self.intermediates is not None:
            if np is not None and type(self.intermediates) is np.ndarray:
                intermediates = builder.CreateNumpyVector(self.intermediates)
            else:
                OperatorStartIntermediatesVector(builder, len(self.intermediates))
                for i in reversed(range(len(self.intermediates))):
                    builder.PrependInt32(self.intermediates[i])
                intermediates = builder.EndVector()
        if self.builtinOptions2 is not None:
            builtinOptions2 = self.builtinOptions2.Pack(builder)
        OperatorStart(builder)
        OperatorAddOpcodeIndex(builder, self.opcodeIndex)
        if self.inputs is not None:
            OperatorAddInputs(builder, inputs)
        if self.outputs is not None:
            OperatorAddOutputs(builder, outputs)
        OperatorAddBuiltinOptionsType(builder, self.builtinOptionsType)
        if self.builtinOptions is not None:
            OperatorAddBuiltinOptions(builder, builtinOptions)
        if self.customOptions is not None:
            OperatorAddCustomOptions(builder, customOptions)
        OperatorAddCustomOptionsFormat(builder, self.customOptionsFormat)
        if self.mutatingVariableInputs is not None:
            OperatorAddMutatingVariableInputs(builder, mutatingVariableInputs)
        if self.intermediates is not None:
            OperatorAddIntermediates(builder, intermediates)
        OperatorAddLargeCustomOptionsOffset(builder, self.largeCustomOptionsOffset)
        OperatorAddLargeCustomOptionsSize(builder, self.largeCustomOptionsSize)
        OperatorAddBuiltinOptions2Type(builder, self.builtinOptions2Type)
        if self.builtinOptions2 is not None:
            OperatorAddBuiltinOptions2(builder, builtinOptions2)
        operator = OperatorEnd(builder)
        return operator
