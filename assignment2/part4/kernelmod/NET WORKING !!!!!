let v4 = Ipv4Addr::new(127, 0, 0, 1);
let addr: SocketAddr = SocketAddr::V4(SocketAddrV4::new(v4, 54321));

let namespace: &'static Namespace =
    unsafe { &*core::ptr::addr_of!(bindings::init_net).cast() };

let mut socket = core::ptr::null_mut();

let (pf, addr, addrlen) = match addr {
    SocketAddr::V4(addr) => (
        bindings::PF_INET,
        &addr as *const _ as _,
        core::mem::size_of::<sockaddr_in>(),
    ),
    _ => panic!("ipv6 not supported"),
};
to_result(unsafe {
    bindings::sock_create_kern(
        namespace.0.get(),
        pf as _,
        bindings::sock_type_SOCK_STREAM as _,
        bindings::IPPROTO_TCP as _,
        &mut socket,
    )
})?;

to_result(unsafe {
    bindings::kernel_connect(socket, addr, addrlen as _, bindings::O_RDWR as _)
})?;
let mut buf: [u8; 10] = [69; 10];
let mut msg = bindings::msghdr {
    msg_flags: bindings::MSG_DONTWAIT,
    ..bindings::msghdr::default()
};
let mut vec = bindings::kvec {
    iov_base: buf.as_ptr() as *mut u8 as _,
    iov_len: buf.len(),
};

let r = unsafe { bindings::kernel_sendmsg(socket, &mut msg, &mut vec, 1, vec.iov_len) };
